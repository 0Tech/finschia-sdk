version: 2.1

defaults: &linux_defaults
  working_directory: /go/src/github.com/line/link-modules
  docker:
    - image: circleci/golang:1.14.6
      environment:
        GO111MODULE: 'on'

jobs:
  check-skippable-pr:
    docker:
      - image: alpine:3.7
    resource_class: small
    steps:
      - run: apk add --no-cache bash curl jq
      - run:
          shell: /bin/bash
          name: Check skippable PR
          command: |
            required_env_vars=(
              "GITHUB_TOKEN"
              "CIRCLE_PROJECT_USERNAME"
              "CIRCLE_PROJECT_REPONAME"
              "CIRCLE_TOKEN"
              "CIRCLE_BUILD_NUM"
            )
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed -e 's#.*/pull/##')

            for required_env_var in ${required_env_vars[@]}; do
              if [[ -z "${!required_env_var}" ]]; then
                printf "${required_env_var} not provided, but that doesn't mean we should skip CI.\n"
                exit 0
              fi
            done

            # Since we're piggybacking off of an existing OAuth var, tweak the var for our uses
            token=$(printf "${GITHUB_TOKEN}" | cut -d':' -f1)

            headers="Authorization: token $token"
            api_endpoint="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}"

            # Fetch PR metadata from Github's API and parse fields from json
            github_res=$(curl --silent --header "${headers}" "${api_endpoint}" | jq '{mergeable_state: .mergeable_state, title: .title}')
            mergeable_state=$(printf "${github_res}" | jq '.mergeable_state')
            title=$(printf "${github_res}" | jq '.title' | tr '[:upper:]' '[:lower:]')
            echo "${title}"

            if [[ "${title}" == "null" && "${mergeable_state}" == "null" ]]; then
              printf "Couldn't fetch info on PR, but that doesn't mean we should skip CI.\n"
              exit 0
            fi

            cancel_running_jobs=0

            if [[ "${mergeable_state}" == "\"draft\"" ]]; then
              printf "PR is a draft, skipping CI!\n"
              cancel_running_jobs=1
            fi

            for skip_token in '[skip ci]' '[ci skip]' '[wip]' 'WIP' 'wip' 'ðŸš§'; do
              if [[ ${title} == *"${skip_token}"* ]]; then
                printf "Found \"${skip_token}\" in PR title, skipping CI!\n"
                cancel_running_jobs=1
              fi
            done

            if [[ "${cancel_running_jobs}" == 1 ]]; then
              printf "Attempting to cancel any running jobs"
              CIRCLE_API_BASE_URL="https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              AUTH_PARAMS="circle-token=${CIRCLE_TOKEN}"
              SELF_BUILD_NUM="${CIRCLE_BUILD_NUM}"

              all_jobs=$(curl --silent --show-error "${CIRCLE_API_BASE_URL}/tree/${CIRCLE_BRANCH}?${AUTH_PARAMS}")

              running_jobs=$(echo "${all_jobs}" | jq "map(if .status == \"running\" or .status == \"not_running\"  then .build_num else \"None\" end) - [${SELF_BUILD_NUM}] - [\"None\"] | .[]")

              for buildNum in $running_jobs; do
                printf "Canceling ${buildNum}"
                curl --silent --show-error --request POST "${CIRCLE_API_BASE_URL}/${buildNum}/cancel?${AUTH_PARAMS}" > /dev/null
              done
              exit 1
            else
              printf "No reason to skip CI, let's go!"
            fi

            exit 0

  fmt:
    <<: *linux_defaults
    resource_class: small
    steps:
      - checkout
      - run:
          name: check formatting
          command: if [[ -n "$(gofmt -l .)" ]]; then gofmt -l .; exit 1; fi

  lint:
    <<: *linux_defaults
    resource_class: xlarge
    parallelism: 1
    steps:
      - checkout
      - run:
          name: lint
          command: |
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.27
            make lint
  unit_test:
    <<: *linux_defaults
    resource_class: medium
    parallelism: 1
    steps:
      - checkout
      - run:
          name: unit-test
          command: |
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            make test-unit
  integration_test:
    <<: *linux_defaults
    resource_class: xlarge
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - linkwasmd-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
      - run:
          name: download dependencies
          working_directory: x/wasm/linkwasmd
          command: |
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            go mod download
      - save_cache:
          key: linkwasmd-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: wasm-integration-test
          working_directory: x/wasm/linkwasmd
          command: make test-integration
  perf_check:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      GO111MODULE: 'on'
    resource_class: medium
    parallelism: 1
    steps:
      - checkout
      - run:
          name: setup tools
          working_directory: x/wasm/linkwasmd/perf/tools
          command: |
            sudo apt update
            sudo apt install linux-tools-$(uname -r)
            tar -zxvf FlameGraph.tar.gz
      - restore_cache:
          keys:
            - go_workspace-pkg-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
      - run:
          name: build binaries
          working_directory: x/wasm/linkwasmd
          command: |
            go env GOMODCACHE
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            make install
      - save_cache:
          key: go_workspace-pkg-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
          paths:
            - "/home/circleci/.go_workspace/pkg/mod"
      - run:
          name: init chain
          working_directory: x/wasm/linkwasmd
          command: perf/scripts/init-chain.sh
      - run:
          name: prepare
          working_directory: x/wasm/linkwasmd
          command: perf/scripts/prepare.sh perf/contract/cw_erc20_v4.wasm 150
      - run:
          name: capture cpu profile
          working_directory: x/wasm/linkwasmd
          command: perf/scripts/capture.sh 150
      - store_artifacts:
          path: x/wasm/linkwasmd/reports
      - run:
          name: Post TPS to GitHub PR
          working_directory: x/wasm/linkwasmd
          command: |
            if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -eq 0 ]]; then
              # skip on non PR branch
              exit 0
            fi

            tps=$(tail -1 reports/report.txt)

            pr_response=$(curl -H "Authorization: token $GITHUB_TOKEN" --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$CIRCLE_PR_NUMBER")

            if [ $(echo $pr_response | jq length) -eq 0 ]; then
              echo "No PR found to update"
            else
              pr_comment_url=$(echo $pr_response | jq -r "._links.comments.href")
            fi

            curl -H "Authorization: token $GITHUB_TOKEN" --location --request POST "$pr_comment_url" \
            -u $GH_USER:$GH_API \
            --header 'Content-Type: application/json' \
            --data-raw "{\"body\":\"$tps\"}"
  semantic_release:
    docker:
      - image: circleci/node:10
    resource_class: medium
    steps:
      - checkout
      - run: yarn global add --no-progress --non-interactive "semantic-release" "@semantic-release/exec"
      - run: $(yarn global bin)/semantic-release

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - check-skippable-pr
      - fmt:
          requires:
            - check-skippable-pr
      - lint:
          requires:
            - check-skippable-pr
      - unit_test:
          requires:
            - check-skippable-pr
      - integration_test:
          requires:
            - check-skippable-pr
      - perf_check:
          requires:
            - check-skippable-pr
      - semantic_release:
          requires:
            - fmt
            - lint
            - unit_test
            - integration_test
          filters:
            branches:
              only: master
