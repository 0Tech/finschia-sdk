// Code generated by MockGen. DO NOT EDIT.
// Source: link/x/token/internal/types/expected_keeper.go

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	exported "github.com/cosmos/cosmos-sdk/x/auth/exported"
	exported0 "github.com/cosmos/cosmos-sdk/x/supply/exported"
	gomock "github.com/golang/mock/gomock"
	exported1 "github.com/line/link/x/iam/exported"
)

// MockIamKeeper is a mock of IamKeeper interface
type MockIamKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockIamKeeperMockRecorder
}

// MockIamKeeperMockRecorder is the mock recorder for MockIamKeeper
type MockIamKeeperMockRecorder struct {
	mock *MockIamKeeper
}

// NewMockIamKeeper creates a new mock instance
func NewMockIamKeeper(ctrl *gomock.Controller) *MockIamKeeper {
	mock := &MockIamKeeper{ctrl: ctrl}
	mock.recorder = &MockIamKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIamKeeper) EXPECT() *MockIamKeeperMockRecorder {
	return m.recorder
}

// GetPermissions mocks base method
func (m *MockIamKeeper) GetPermissions(arg0 types.Context, arg1 types.AccAddress) []exported1.PermissionI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", arg0, arg1)
	ret0, _ := ret[0].([]exported1.PermissionI)
	return ret0
}

// GetPermissions indicates an expected call of GetPermissions
func (mr *MockIamKeeperMockRecorder) GetPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockIamKeeper)(nil).GetPermissions), arg0, arg1)
}

// InheritPermission mocks base method
func (m *MockIamKeeper) InheritPermission(arg0 types.Context, arg1, arg2 types.AccAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InheritPermission", arg0, arg1, arg2)
}

// InheritPermission indicates an expected call of InheritPermission
func (mr *MockIamKeeperMockRecorder) InheritPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InheritPermission", reflect.TypeOf((*MockIamKeeper)(nil).InheritPermission), arg0, arg1, arg2)
}

// GrantPermission mocks base method
func (m *MockIamKeeper) GrantPermission(arg0 types.Context, arg1 types.AccAddress, arg2 exported1.PermissionI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrantPermission", arg0, arg1, arg2)
}

// GrantPermission indicates an expected call of GrantPermission
func (mr *MockIamKeeperMockRecorder) GrantPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPermission", reflect.TypeOf((*MockIamKeeper)(nil).GrantPermission), arg0, arg1, arg2)
}

// RevokePermission mocks base method
func (m *MockIamKeeper) RevokePermission(arg0 types.Context, arg1 types.AccAddress, arg2 exported1.PermissionI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevokePermission", arg0, arg1, arg2)
}

// RevokePermission indicates an expected call of RevokePermission
func (mr *MockIamKeeperMockRecorder) RevokePermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermission", reflect.TypeOf((*MockIamKeeper)(nil).RevokePermission), arg0, arg1, arg2)
}

// HasPermission mocks base method
func (m *MockIamKeeper) HasPermission(arg0 types.Context, arg1 types.AccAddress, arg2 exported1.PermissionI) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermission indicates an expected call of HasPermission
func (mr *MockIamKeeperMockRecorder) HasPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermission", reflect.TypeOf((*MockIamKeeper)(nil).HasPermission), arg0, arg1, arg2)
}

// WithPrefix mocks base method
func (m *MockIamKeeper) WithPrefix(arg0 string) exported1.IamKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPrefix", arg0)
	ret0, _ := ret[0].(exported1.IamKeeper)
	return ret0
}

// WithPrefix indicates an expected call of WithPrefix
func (mr *MockIamKeeperMockRecorder) WithPrefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPrefix", reflect.TypeOf((*MockIamKeeper)(nil).WithPrefix), arg0)
}

// MockSupplyKeeper is a mock of SupplyKeeper interface
type MockSupplyKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockSupplyKeeperMockRecorder
}

// MockSupplyKeeperMockRecorder is the mock recorder for MockSupplyKeeper
type MockSupplyKeeperMockRecorder struct {
	mock *MockSupplyKeeper
}

// NewMockSupplyKeeper creates a new mock instance
func NewMockSupplyKeeper(ctrl *gomock.Controller) *MockSupplyKeeper {
	mock := &MockSupplyKeeper{ctrl: ctrl}
	mock.recorder = &MockSupplyKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSupplyKeeper) EXPECT() *MockSupplyKeeperMockRecorder {
	return m.recorder
}

// GetModuleAddress mocks base method
func (m *MockSupplyKeeper) GetModuleAddress(arg0 string) types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAddress", arg0)
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetModuleAddress indicates an expected call of GetModuleAddress
func (mr *MockSupplyKeeperMockRecorder) GetModuleAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAddress", reflect.TypeOf((*MockSupplyKeeper)(nil).GetModuleAddress), arg0)
}

// MintCoins mocks base method
func (m *MockSupplyKeeper) MintCoins(arg0 types.Context, arg1 string, arg2 types.Coins) types.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Error)
	return ret0
}

// MintCoins indicates an expected call of MintCoins
func (mr *MockSupplyKeeperMockRecorder) MintCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintCoins", reflect.TypeOf((*MockSupplyKeeper)(nil).MintCoins), arg0, arg1, arg2)
}

// BurnCoins mocks base method
func (m *MockSupplyKeeper) BurnCoins(arg0 types.Context, arg1 string, arg2 types.Coins) types.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BurnCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.Error)
	return ret0
}

// BurnCoins indicates an expected call of BurnCoins
func (mr *MockSupplyKeeperMockRecorder) BurnCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BurnCoins", reflect.TypeOf((*MockSupplyKeeper)(nil).BurnCoins), arg0, arg1, arg2)
}

// GetSupply mocks base method
func (m *MockSupplyKeeper) GetSupply(arg0 types.Context) exported0.SupplyI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupply", arg0)
	ret0, _ := ret[0].(exported0.SupplyI)
	return ret0
}

// GetSupply indicates an expected call of GetSupply
func (mr *MockSupplyKeeperMockRecorder) GetSupply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupply", reflect.TypeOf((*MockSupplyKeeper)(nil).GetSupply), arg0)
}

// SendCoinsFromModuleToAccount mocks base method
func (m *MockSupplyKeeper) SendCoinsFromModuleToAccount(arg0 types.Context, arg1 string, arg2 types.AccAddress, arg3 types.Coins) types.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.Error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount
func (mr *MockSupplyKeeperMockRecorder) SendCoinsFromModuleToAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockSupplyKeeper)(nil).SendCoinsFromModuleToAccount), arg0, arg1, arg2, arg3)
}

// SendCoinsFromAccountToModule mocks base method
func (m *MockSupplyKeeper) SendCoinsFromAccountToModule(arg0 types.Context, arg1 types.AccAddress, arg2 string, arg3 types.Coins) types.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.Error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule
func (mr *MockSupplyKeeperMockRecorder) SendCoinsFromAccountToModule(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockSupplyKeeper)(nil).SendCoinsFromAccountToModule), arg0, arg1, arg2, arg3)
}

// MockAccountKeeper is a mock of AccountKeeper interface
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// NewAccountWithAddress mocks base method
func (m *MockAccountKeeper) NewAccountWithAddress(ctx types.Context, addr types.AccAddress) exported.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccountWithAddress", ctx, addr)
	ret0, _ := ret[0].(exported.Account)
	return ret0
}

// NewAccountWithAddress indicates an expected call of NewAccountWithAddress
func (mr *MockAccountKeeperMockRecorder) NewAccountWithAddress(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccountWithAddress", reflect.TypeOf((*MockAccountKeeper)(nil).NewAccountWithAddress), ctx, addr)
}

// GetAccount mocks base method
func (m *MockAccountKeeper) GetAccount(ctx types.Context, addr types.AccAddress) exported.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(exported.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// GetAllAccounts mocks base method
func (m *MockAccountKeeper) GetAllAccounts(ctx types.Context) []exported.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", ctx)
	ret0, _ := ret[0].([]exported.Account)
	return ret0
}

// GetAllAccounts indicates an expected call of GetAllAccounts
func (mr *MockAccountKeeperMockRecorder) GetAllAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockAccountKeeper)(nil).GetAllAccounts), ctx)
}

// SetAccount mocks base method
func (m *MockAccountKeeper) SetAccount(ctx types.Context, acc exported.Account) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccount", ctx, acc)
}

// SetAccount indicates an expected call of SetAccount
func (mr *MockAccountKeeperMockRecorder) SetAccount(ctx, acc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).SetAccount), ctx, acc)
}

// IterateAccounts mocks base method
func (m *MockAccountKeeper) IterateAccounts(ctx types.Context, process func(exported.Account) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateAccounts", ctx, process)
}

// IterateAccounts indicates an expected call of IterateAccounts
func (mr *MockAccountKeeperMockRecorder) IterateAccounts(ctx, process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateAccounts", reflect.TypeOf((*MockAccountKeeper)(nil).IterateAccounts), ctx, process)
}
