// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/rpc/link/block/context/context_wrapper.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	context "github.com/cosmos/cosmos-sdk/client/context"
	codec "github.com/cosmos/cosmos-sdk/codec"
	gomock "github.com/golang/mock/gomock"
	client "github.com/tendermint/tendermint/rpc/client"
	types "github.com/tendermint/tendermint/types"
)

// MockCLIContext is a mock of CLIContext interface
type MockCLIContext struct {
	ctrl     *gomock.Controller
	recorder *MockCLIContextMockRecorder
}

// MockCLIContextMockRecorder is the mock recorder for MockCLIContext
type MockCLIContextMockRecorder struct {
	mock *MockCLIContext
}

// NewMockCLIContext creates a new mock instance
func NewMockCLIContext(ctrl *gomock.Controller) *MockCLIContext {
	mock := &MockCLIContext{ctrl: ctrl}
	mock.recorder = &MockCLIContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCLIContext) EXPECT() *MockCLIContextMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockCLIContext) Verify(height int64) (types.SignedHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", height)
	ret0, _ := ret[0].(types.SignedHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockCLIContextMockRecorder) Verify(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCLIContext)(nil).Verify), height)
}

// TrustNode mocks base method
func (m *MockCLIContext) TrustNode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrustNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TrustNode indicates an expected call of TrustNode
func (mr *MockCLIContextMockRecorder) TrustNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrustNode", reflect.TypeOf((*MockCLIContext)(nil).TrustNode))
}

// Indent mocks base method
func (m *MockCLIContext) Indent() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indent")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Indent indicates an expected call of Indent
func (mr *MockCLIContextMockRecorder) Indent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indent", reflect.TypeOf((*MockCLIContext)(nil).Indent))
}

// Codec mocks base method
func (m *MockCLIContext) Codec() *codec.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Codec")
	ret0, _ := ret[0].(*codec.Codec)
	return ret0
}

// Codec indicates an expected call of Codec
func (mr *MockCLIContextMockRecorder) Codec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codec", reflect.TypeOf((*MockCLIContext)(nil).Codec))
}

// GetNode mocks base method
func (m *MockCLIContext) GetNode() (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode")
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockCLIContextMockRecorder) GetNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockCLIContext)(nil).GetNode))
}

// CosmosCliCtx mocks base method
func (m *MockCLIContext) CosmosCliCtx() context.CLIContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CosmosCliCtx")
	ret0, _ := ret[0].(context.CLIContext)
	return ret0
}

// CosmosCliCtx indicates an expected call of CosmosCliCtx
func (mr *MockCLIContextMockRecorder) CosmosCliCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CosmosCliCtx", reflect.TypeOf((*MockCLIContext)(nil).CosmosCliCtx))
}
