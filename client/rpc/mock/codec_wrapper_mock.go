// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/happyprg/Documents/workspace_blab2/link/client/rpc/link/block/codec/codec_wrapper.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	auth "github.com/cosmos/cosmos-sdk/x/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockCodec is a mock of Codec interface
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *MockCodecMockRecorder
}

// MockCodecMockRecorder is the mock recorder for MockCodec
type MockCodecMockRecorder struct {
	mock *MockCodec
}

// NewMockCodec creates a new mock instance
func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &MockCodecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodec) EXPECT() *MockCodecMockRecorder {
	return m.recorder
}

// MarshalJSONIndent mocks base method
func (m *MockCodec) MarshalJSONIndent(res interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSONIndent", res)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSONIndent indicates an expected call of MarshalJSONIndent
func (mr *MockCodecMockRecorder) MarshalJSONIndent(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSONIndent", reflect.TypeOf((*MockCodec)(nil).MarshalJSONIndent), res)
}

// MarshalJSON mocks base method
func (m *MockCodec) MarshalJSON(res interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON", res)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON
func (mr *MockCodecMockRecorder) MarshalJSON(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockCodec)(nil).MarshalJSON), res)
}

// UnmarshalBinaryLengthPrefixed mocks base method
func (m *MockCodec) UnmarshalBinaryLengthPrefixed(txBytes []byte) (auth.StdTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalBinaryLengthPrefixed", txBytes)
	ret0, _ := ret[0].(auth.StdTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalBinaryLengthPrefixed indicates an expected call of UnmarshalBinaryLengthPrefixed
func (mr *MockCodecMockRecorder) UnmarshalBinaryLengthPrefixed(txBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalBinaryLengthPrefixed", reflect.TypeOf((*MockCodec)(nil).UnmarshalBinaryLengthPrefixed), txBytes)
}
